AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Portfolio contact form backend with public and private Lambdas.

Parameters:
  RecaptchaSecretName:
    Type: String
    Description: The name of the secret in AWS Secrets Manager.
    Default: PortfolioRecaptchaSecret

  PrivateFunctionName:
    Type: String
    Description: The name of the private email sending Lambda function.
    Default: PortfolioSendEmailFunction

Resources:
  # --- Custom Managed Policy for SES Permissions ---
  SendEmailManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
            Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'

  # --- Explicit IAM Role for the Private Function ---
  PrivateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # AWS managed policy for logging
        - !Ref SendEmailManagedPolicy # Attach our custom SES policy

  # --- Private Lambda (Sends the Email) ---
  PrivateEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref PrivateFunctionName
      CodeUri: private-lambda/
      Handler: app.handler
      Runtime: nodejs18.x
      Architectures: [arm64]
      Timeout: 60
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          SENDER_EMAIL: "default@example.com"
          RECIPIENT_EMAIL: "default@example.com"
      Role: !GetAtt PrivateFunctionRole.Arn # Use the explicitly defined role
      Events:
        Api:
          Type: Api
          Properties:
            Path: /send-email
            Method: post
            RestApiId: !Ref PortfolioApi
            Auth:
              ApiKeyRequired: true

  # --- Public Lambda (Verifies reCAPTCHA) ---
  PublicVerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PortfolioCaptchaVerifyFunction
      CodeUri: public-lambda/
      Handler: app.handler
      Runtime: nodejs18.x
      Architectures: [arm64]
      Timeout: 60
      Environment:
        Variables:
          SECRET_NAME: !Ref RecaptchaSecretName
          PRIVATE_FUNCTION_NAME: !Ref PrivateFunctionName
          REGION: !Ref AWS::Region
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${RecaptchaSecretName}-*'
        - LambdaInvokePolicy:
            FunctionName: !Ref PrivateFunctionName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /contact
            Method: post
            RestApiId: !Ref PortfolioApi

  # --- API Gateway Definition ---
  PortfolioApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: PortfolioUsagePlan
          Description: Usage plan for the portfolio contact form
          Quota: { Limit: 1000, Period: DAY }
          Throttle: { BurstLimit: 5, RateLimit: 2 }

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for the public function"
    Value: !Sub "https://${PortfolioApi}.execute-api.${AWS::Region}.amazonaws.com/prod/contact"
